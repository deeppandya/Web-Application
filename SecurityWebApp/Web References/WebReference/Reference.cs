//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace AndroidWebApp.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AndroidSecurityWSSoap", Namespace="http://tempuri.org/")]
    public partial class AndroidSecurityWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback registerUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateUserDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeviceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRegistrationKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkDeviceExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateRegKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback getImageByteArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkUserExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback isUserActiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserLoginInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkRegKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendLocationMailOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AndroidSecurityWS() {
            this.Url = global::AndroidWebApp.Properties.Settings.Default.AndroidWebApp_WebReference_AndroidSecurityWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event registerUserCompletedEventHandler registerUserCompleted;
        
        /// <remarks/>
        public event updateUserDeviceCompletedEventHandler updateUserDeviceCompleted;
        
        /// <remarks/>
        public event checkUserCompletedEventHandler checkUserCompleted;
        
        /// <remarks/>
        public event GetDeviceIdCompletedEventHandler GetDeviceIdCompleted;
        
        /// <remarks/>
        public event GetRegistrationKeyCompletedEventHandler GetRegistrationKeyCompleted;
        
        /// <remarks/>
        public event GetUserIdCompletedEventHandler GetUserIdCompleted;
        
        /// <remarks/>
        public event checkDeviceExistsCompletedEventHandler checkDeviceExistsCompleted;
        
        /// <remarks/>
        public event updateRegKeyCompletedEventHandler updateRegKeyCompleted;
        
        /// <remarks/>
        public event InsertLocationCompletedEventHandler InsertLocationCompleted;
        
        /// <remarks/>
        public event GetLocationCompletedEventHandler GetLocationCompleted;
        
        /// <remarks/>
        public event InsertImageCompletedEventHandler InsertImageCompleted;
        
        /// <remarks/>
        public event sendMailCompletedEventHandler sendMailCompleted;
        
        /// <remarks/>
        public event getImageByteArrayCompletedEventHandler getImageByteArrayCompleted;
        
        /// <remarks/>
        public event deleteImageCompletedEventHandler deleteImageCompleted;
        
        /// <remarks/>
        public event getUserInformationCompletedEventHandler getUserInformationCompleted;
        
        /// <remarks/>
        public event checkUserExistsCompletedEventHandler checkUserExistsCompleted;
        
        /// <remarks/>
        public event isUserActiveCompletedEventHandler isUserActiveCompleted;
        
        /// <remarks/>
        public event getUserLoginInfoCompletedEventHandler getUserLoginInfoCompleted;
        
        /// <remarks/>
        public event checkRegKeyCompletedEventHandler checkRegKeyCompleted;
        
        /// <remarks/>
        public event sendLocationMailCompletedEventHandler sendLocationMailCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/registerUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool registerUser(string deviceId, string regKey, string UserId, string password, string deviceName, string phoneNo, string service_provider, string question, string answer) {
            object[] results = this.Invoke("registerUser", new object[] {
                        deviceId,
                        regKey,
                        UserId,
                        password,
                        deviceName,
                        phoneNo,
                        service_provider,
                        question,
                        answer});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void registerUserAsync(string deviceId, string regKey, string UserId, string password, string deviceName, string phoneNo, string service_provider, string question, string answer) {
            this.registerUserAsync(deviceId, regKey, UserId, password, deviceName, phoneNo, service_provider, question, answer, null);
        }
        
        /// <remarks/>
        public void registerUserAsync(string deviceId, string regKey, string UserId, string password, string deviceName, string phoneNo, string service_provider, string question, string answer, object userState) {
            if ((this.registerUserOperationCompleted == null)) {
                this.registerUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterUserOperationCompleted);
            }
            this.InvokeAsync("registerUser", new object[] {
                        deviceId,
                        regKey,
                        UserId,
                        password,
                        deviceName,
                        phoneNo,
                        service_provider,
                        question,
                        answer}, this.registerUserOperationCompleted, userState);
        }
        
        private void OnregisterUserOperationCompleted(object arg) {
            if ((this.registerUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerUserCompleted(this, new registerUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateUserDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool updateUserDevice(string deviceId, string regKey, string UserId, string oldUserId) {
            object[] results = this.Invoke("updateUserDevice", new object[] {
                        deviceId,
                        regKey,
                        UserId,
                        oldUserId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateUserDeviceAsync(string deviceId, string regKey, string UserId, string oldUserId) {
            this.updateUserDeviceAsync(deviceId, regKey, UserId, oldUserId, null);
        }
        
        /// <remarks/>
        public void updateUserDeviceAsync(string deviceId, string regKey, string UserId, string oldUserId, object userState) {
            if ((this.updateUserDeviceOperationCompleted == null)) {
                this.updateUserDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateUserDeviceOperationCompleted);
            }
            this.InvokeAsync("updateUserDevice", new object[] {
                        deviceId,
                        regKey,
                        UserId,
                        oldUserId}, this.updateUserDeviceOperationCompleted, userState);
        }
        
        private void OnupdateUserDeviceOperationCompleted(object arg) {
            if ((this.updateUserDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateUserDeviceCompleted(this, new updateUserDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool checkUser(string UserId, string password) {
            object[] results = this.Invoke("checkUser", new object[] {
                        UserId,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void checkUserAsync(string UserId, string password) {
            this.checkUserAsync(UserId, password, null);
        }
        
        /// <remarks/>
        public void checkUserAsync(string UserId, string password, object userState) {
            if ((this.checkUserOperationCompleted == null)) {
                this.checkUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckUserOperationCompleted);
            }
            this.InvokeAsync("checkUser", new object[] {
                        UserId,
                        password}, this.checkUserOperationCompleted, userState);
        }
        
        private void OncheckUserOperationCompleted(object arg) {
            if ((this.checkUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkUserCompleted(this, new checkUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDeviceId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDeviceId(string userId) {
            object[] results = this.Invoke("GetDeviceId", new object[] {
                        userId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeviceIdAsync(string userId) {
            this.GetDeviceIdAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetDeviceIdAsync(string userId, object userState) {
            if ((this.GetDeviceIdOperationCompleted == null)) {
                this.GetDeviceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeviceIdOperationCompleted);
            }
            this.InvokeAsync("GetDeviceId", new object[] {
                        userId}, this.GetDeviceIdOperationCompleted, userState);
        }
        
        private void OnGetDeviceIdOperationCompleted(object arg) {
            if ((this.GetDeviceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeviceIdCompleted(this, new GetDeviceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRegistrationKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRegistrationKey(string deviceId) {
            object[] results = this.Invoke("GetRegistrationKey", new object[] {
                        deviceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRegistrationKeyAsync(string deviceId) {
            this.GetRegistrationKeyAsync(deviceId, null);
        }
        
        /// <remarks/>
        public void GetRegistrationKeyAsync(string deviceId, object userState) {
            if ((this.GetRegistrationKeyOperationCompleted == null)) {
                this.GetRegistrationKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegistrationKeyOperationCompleted);
            }
            this.InvokeAsync("GetRegistrationKey", new object[] {
                        deviceId}, this.GetRegistrationKeyOperationCompleted, userState);
        }
        
        private void OnGetRegistrationKeyOperationCompleted(object arg) {
            if ((this.GetRegistrationKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegistrationKeyCompleted(this, new GetRegistrationKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserId(string deviceId) {
            object[] results = this.Invoke("GetUserId", new object[] {
                        deviceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserIdAsync(string deviceId) {
            this.GetUserIdAsync(deviceId, null);
        }
        
        /// <remarks/>
        public void GetUserIdAsync(string deviceId, object userState) {
            if ((this.GetUserIdOperationCompleted == null)) {
                this.GetUserIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserIdOperationCompleted);
            }
            this.InvokeAsync("GetUserId", new object[] {
                        deviceId}, this.GetUserIdOperationCompleted, userState);
        }
        
        private void OnGetUserIdOperationCompleted(object arg) {
            if ((this.GetUserIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserIdCompleted(this, new GetUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkDeviceExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string checkDeviceExists(string deviceId) {
            object[] results = this.Invoke("checkDeviceExists", new object[] {
                        deviceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkDeviceExistsAsync(string deviceId) {
            this.checkDeviceExistsAsync(deviceId, null);
        }
        
        /// <remarks/>
        public void checkDeviceExistsAsync(string deviceId, object userState) {
            if ((this.checkDeviceExistsOperationCompleted == null)) {
                this.checkDeviceExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckDeviceExistsOperationCompleted);
            }
            this.InvokeAsync("checkDeviceExists", new object[] {
                        deviceId}, this.checkDeviceExistsOperationCompleted, userState);
        }
        
        private void OncheckDeviceExistsOperationCompleted(object arg) {
            if ((this.checkDeviceExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkDeviceExistsCompleted(this, new checkDeviceExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateRegKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool updateRegKey(string deviceId, string regKey) {
            object[] results = this.Invoke("updateRegKey", new object[] {
                        deviceId,
                        regKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateRegKeyAsync(string deviceId, string regKey) {
            this.updateRegKeyAsync(deviceId, regKey, null);
        }
        
        /// <remarks/>
        public void updateRegKeyAsync(string deviceId, string regKey, object userState) {
            if ((this.updateRegKeyOperationCompleted == null)) {
                this.updateRegKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateRegKeyOperationCompleted);
            }
            this.InvokeAsync("updateRegKey", new object[] {
                        deviceId,
                        regKey}, this.updateRegKeyOperationCompleted, userState);
        }
        
        private void OnupdateRegKeyOperationCompleted(object arg) {
            if ((this.updateRegKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateRegKeyCompleted(this, new updateRegKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertLocation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertLocation(string deviceId, string latitude, string longitude) {
            object[] results = this.Invoke("InsertLocation", new object[] {
                        deviceId,
                        latitude,
                        longitude});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertLocationAsync(string deviceId, string latitude, string longitude) {
            this.InsertLocationAsync(deviceId, latitude, longitude, null);
        }
        
        /// <remarks/>
        public void InsertLocationAsync(string deviceId, string latitude, string longitude, object userState) {
            if ((this.InsertLocationOperationCompleted == null)) {
                this.InsertLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLocationOperationCompleted);
            }
            this.InvokeAsync("InsertLocation", new object[] {
                        deviceId,
                        latitude,
                        longitude}, this.InsertLocationOperationCompleted, userState);
        }
        
        private void OnInsertLocationOperationCompleted(object arg) {
            if ((this.InsertLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLocationCompleted(this, new InsertLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLocation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetLocation(string deviceId) {
            object[] results = this.Invoke("GetLocation", new object[] {
                        deviceId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetLocationAsync(string deviceId) {
            this.GetLocationAsync(deviceId, null);
        }
        
        /// <remarks/>
        public void GetLocationAsync(string deviceId, object userState) {
            if ((this.GetLocationOperationCompleted == null)) {
                this.GetLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocationOperationCompleted);
            }
            this.InvokeAsync("GetLocation", new object[] {
                        deviceId}, this.GetLocationOperationCompleted, userState);
        }
        
        private void OnGetLocationOperationCompleted(object arg) {
            if ((this.GetLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocationCompleted(this, new GetLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertImage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertImage(string deviceId, string byteStream, string toAddress) {
            object[] results = this.Invoke("InsertImage", new object[] {
                        deviceId,
                        byteStream,
                        toAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertImageAsync(string deviceId, string byteStream, string toAddress) {
            this.InsertImageAsync(deviceId, byteStream, toAddress, null);
        }
        
        /// <remarks/>
        public void InsertImageAsync(string deviceId, string byteStream, string toAddress, object userState) {
            if ((this.InsertImageOperationCompleted == null)) {
                this.InsertImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertImageOperationCompleted);
            }
            this.InvokeAsync("InsertImage", new object[] {
                        deviceId,
                        byteStream,
                        toAddress}, this.InsertImageOperationCompleted, userState);
        }
        
        private void OnInsertImageOperationCompleted(object arg) {
            if ((this.InsertImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertImageCompleted(this, new InsertImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool sendMail(string deviceId, string byteArray, string ToUserId, string subject, string mailText, bool isAttachment) {
            object[] results = this.Invoke("sendMail", new object[] {
                        deviceId,
                        byteArray,
                        ToUserId,
                        subject,
                        mailText,
                        isAttachment});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void sendMailAsync(string deviceId, string byteArray, string ToUserId, string subject, string mailText, bool isAttachment) {
            this.sendMailAsync(deviceId, byteArray, ToUserId, subject, mailText, isAttachment, null);
        }
        
        /// <remarks/>
        public void sendMailAsync(string deviceId, string byteArray, string ToUserId, string subject, string mailText, bool isAttachment, object userState) {
            if ((this.sendMailOperationCompleted == null)) {
                this.sendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMailOperationCompleted);
            }
            this.InvokeAsync("sendMail", new object[] {
                        deviceId,
                        byteArray,
                        ToUserId,
                        subject,
                        mailText,
                        isAttachment}, this.sendMailOperationCompleted, userState);
        }
        
        private void OnsendMailOperationCompleted(object arg) {
            if ((this.sendMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMailCompleted(this, new sendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getImageByteArray", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] getImageByteArray(string deviceId) {
            object[] results = this.Invoke("getImageByteArray", new object[] {
                        deviceId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getImageByteArrayAsync(string deviceId) {
            this.getImageByteArrayAsync(deviceId, null);
        }
        
        /// <remarks/>
        public void getImageByteArrayAsync(string deviceId, object userState) {
            if ((this.getImageByteArrayOperationCompleted == null)) {
                this.getImageByteArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetImageByteArrayOperationCompleted);
            }
            this.InvokeAsync("getImageByteArray", new object[] {
                        deviceId}, this.getImageByteArrayOperationCompleted, userState);
        }
        
        private void OngetImageByteArrayOperationCompleted(object arg) {
            if ((this.getImageByteArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getImageByteArrayCompleted(this, new getImageByteArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteImage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deleteImage(string deviceId) {
            this.Invoke("deleteImage", new object[] {
                        deviceId});
        }
        
        /// <remarks/>
        public void deleteImageAsync(string deviceId) {
            this.deleteImageAsync(deviceId, null);
        }
        
        /// <remarks/>
        public void deleteImageAsync(string deviceId, object userState) {
            if ((this.deleteImageOperationCompleted == null)) {
                this.deleteImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteImageOperationCompleted);
            }
            this.InvokeAsync("deleteImage", new object[] {
                        deviceId}, this.deleteImageOperationCompleted, userState);
        }
        
        private void OndeleteImageOperationCompleted(object arg) {
            if ((this.deleteImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getUserInformation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getUserInformation(string deviceId) {
            object[] results = this.Invoke("getUserInformation", new object[] {
                        deviceId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getUserInformationAsync(string deviceId) {
            this.getUserInformationAsync(deviceId, null);
        }
        
        /// <remarks/>
        public void getUserInformationAsync(string deviceId, object userState) {
            if ((this.getUserInformationOperationCompleted == null)) {
                this.getUserInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserInformationOperationCompleted);
            }
            this.InvokeAsync("getUserInformation", new object[] {
                        deviceId}, this.getUserInformationOperationCompleted, userState);
        }
        
        private void OngetUserInformationOperationCompleted(object arg) {
            if ((this.getUserInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserInformationCompleted(this, new getUserInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkUserExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool checkUserExists(string userId) {
            object[] results = this.Invoke("checkUserExists", new object[] {
                        userId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void checkUserExistsAsync(string userId) {
            this.checkUserExistsAsync(userId, null);
        }
        
        /// <remarks/>
        public void checkUserExistsAsync(string userId, object userState) {
            if ((this.checkUserExistsOperationCompleted == null)) {
                this.checkUserExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckUserExistsOperationCompleted);
            }
            this.InvokeAsync("checkUserExists", new object[] {
                        userId}, this.checkUserExistsOperationCompleted, userState);
        }
        
        private void OncheckUserExistsOperationCompleted(object arg) {
            if ((this.checkUserExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkUserExistsCompleted(this, new checkUserExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isUserActive", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool isUserActive(string userId) {
            object[] results = this.Invoke("isUserActive", new object[] {
                        userId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isUserActiveAsync(string userId) {
            this.isUserActiveAsync(userId, null);
        }
        
        /// <remarks/>
        public void isUserActiveAsync(string userId, object userState) {
            if ((this.isUserActiveOperationCompleted == null)) {
                this.isUserActiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisUserActiveOperationCompleted);
            }
            this.InvokeAsync("isUserActive", new object[] {
                        userId}, this.isUserActiveOperationCompleted, userState);
        }
        
        private void OnisUserActiveOperationCompleted(object arg) {
            if ((this.isUserActiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isUserActiveCompleted(this, new isUserActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getUserLoginInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getUserLoginInfo(string userId) {
            object[] results = this.Invoke("getUserLoginInfo", new object[] {
                        userId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getUserLoginInfoAsync(string userId) {
            this.getUserLoginInfoAsync(userId, null);
        }
        
        /// <remarks/>
        public void getUserLoginInfoAsync(string userId, object userState) {
            if ((this.getUserLoginInfoOperationCompleted == null)) {
                this.getUserLoginInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserLoginInfoOperationCompleted);
            }
            this.InvokeAsync("getUserLoginInfo", new object[] {
                        userId}, this.getUserLoginInfoOperationCompleted, userState);
        }
        
        private void OngetUserLoginInfoOperationCompleted(object arg) {
            if ((this.getUserLoginInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserLoginInfoCompleted(this, new getUserLoginInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkRegKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool checkRegKey(string regKey, string deviceId) {
            object[] results = this.Invoke("checkRegKey", new object[] {
                        regKey,
                        deviceId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void checkRegKeyAsync(string regKey, string deviceId) {
            this.checkRegKeyAsync(regKey, deviceId, null);
        }
        
        /// <remarks/>
        public void checkRegKeyAsync(string regKey, string deviceId, object userState) {
            if ((this.checkRegKeyOperationCompleted == null)) {
                this.checkRegKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckRegKeyOperationCompleted);
            }
            this.InvokeAsync("checkRegKey", new object[] {
                        regKey,
                        deviceId}, this.checkRegKeyOperationCompleted, userState);
        }
        
        private void OncheckRegKeyOperationCompleted(object arg) {
            if ((this.checkRegKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkRegKeyCompleted(this, new checkRegKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendLocationMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool sendLocationMail(string deviceId, string byteArray, string NetLat, string NetLong, string toAddress) {
            object[] results = this.Invoke("sendLocationMail", new object[] {
                        deviceId,
                        byteArray,
                        NetLat,
                        NetLong,
                        toAddress});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void sendLocationMailAsync(string deviceId, string byteArray, string NetLat, string NetLong, string toAddress) {
            this.sendLocationMailAsync(deviceId, byteArray, NetLat, NetLong, toAddress, null);
        }
        
        /// <remarks/>
        public void sendLocationMailAsync(string deviceId, string byteArray, string NetLat, string NetLong, string toAddress, object userState) {
            if ((this.sendLocationMailOperationCompleted == null)) {
                this.sendLocationMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendLocationMailOperationCompleted);
            }
            this.InvokeAsync("sendLocationMail", new object[] {
                        deviceId,
                        byteArray,
                        NetLat,
                        NetLong,
                        toAddress}, this.sendLocationMailOperationCompleted, userState);
        }
        
        private void OnsendLocationMailOperationCompleted(object arg) {
            if ((this.sendLocationMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendLocationMailCompleted(this, new sendLocationMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void registerUserCompletedEventHandler(object sender, registerUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class registerUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal registerUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void updateUserDeviceCompletedEventHandler(object sender, updateUserDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateUserDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateUserDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void checkUserCompletedEventHandler(object sender, checkUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetDeviceIdCompletedEventHandler(object sender, GetDeviceIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeviceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeviceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetRegistrationKeyCompletedEventHandler(object sender, GetRegistrationKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegistrationKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegistrationKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserIdCompletedEventHandler(object sender, GetUserIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void checkDeviceExistsCompletedEventHandler(object sender, checkDeviceExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkDeviceExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkDeviceExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void updateRegKeyCompletedEventHandler(object sender, updateRegKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateRegKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateRegKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void InsertLocationCompletedEventHandler(object sender, InsertLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLocationCompletedEventHandler(object sender, GetLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void InsertImageCompletedEventHandler(object sender, InsertImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void sendMailCompletedEventHandler(object sender, sendMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void getImageByteArrayCompletedEventHandler(object sender, getImageByteArrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getImageByteArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getImageByteArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void deleteImageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void getUserInformationCompletedEventHandler(object sender, getUserInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void checkUserExistsCompletedEventHandler(object sender, checkUserExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkUserExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkUserExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void isUserActiveCompletedEventHandler(object sender, isUserActiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isUserActiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isUserActiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void getUserLoginInfoCompletedEventHandler(object sender, getUserLoginInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserLoginInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserLoginInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void checkRegKeyCompletedEventHandler(object sender, checkRegKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkRegKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkRegKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void sendLocationMailCompletedEventHandler(object sender, sendLocationMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendLocationMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendLocationMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591